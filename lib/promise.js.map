{"version":3,"file":"promise.js","sources":["../src/types.ts","../src/Promise.ts"],"sourcesContent":["export type OnFulfilled = (value?: any) => void;\n\nexport type OnRejected = (reason?: any) => void;\n\nexport type PromiseFn = (resolve: OnFulfilled, reject: OnRejected) => void;\n\nexport enum PromiseState {\n  'PENDING',\n  'FULFILLED',\n  'REJECTED'\n}\n","import {OnFulfilled, OnRejected, PromiseFn, PromiseState} from './types';\n\nexport default class Promise {\n  static resolve() {\n    //\n  }\n\n  static reject() {\n    //\n  }\n\n  static all() {\n    //\n  }\n\n  static race() {\n    //\n  }\n\n  private value: any;\n  private state: PromiseState;\n\n  constructor(fn: PromiseFn) {\n    this.value = undefined;\n    this.state = PromiseState.PENDING;\n    try {\n      fn(this.resolve, this.reject);\n    } catch (e) {\n      this.reject(e);\n    }\n  }\n\n  /**\n   * then\n   * @param onFulfilled\n   * @param onRejected\n   * @see https://promisesaplus.com/#the-then-method\n   */\n  then(onFulfilled?: OnFulfilled, onRejected?: OnRejected) {\n    if (typeof onFulfilled !== 'function') {\n      onFulfilled = (value) => value;\n    }\n    if (typeof onRejected !== 'function') {\n      onRejected = (reason) => {\n        throw reason;\n      };\n    }\n\n    if (this.state === PromiseState.FULFILLED) {\n\n    }\n  }\n\n  catch() {\n    //\n  }\n\n  finally() {\n    //\n  }\n\n  private resolve(value: any) {\n    if (value instanceof Promise) {\n      return value.then(this.resolve, this.reject);\n    }\n\n    setTimeout(() => {\n      if (this.state === PromiseState.PENDING) {\n        this.state = PromiseState.FULFILLED;\n        this.value = value;\n      }\n    });\n  }\n\n  private reject(reason: any) {\n    //\n  }\n\n  /**\n   * #2.3 resolution procedure\n   * @see https://promisesaplus.com/#the-promise-resolution-procedure\n   */\n  private resolutionProcedure(promise, x) {\n    // #2.3.1\n    if (promise === x) {\n      throw new TypeError('Error');\n    }\n\n    if (x instanceof Promise) {\n      if (x.state === PromiseState.PENDING) {\n        x.then((value) => {\n          this.resolutionProcedure(promise, value);\n        }, this.reject);\n      }\n    }\n  }\n}\n\nfunction resolve() {\n  \n}\n\nfunction reject() {\n  \n}\n\nfunction resolutionProcedure() {\n  \n}\n"],"names":[],"mappings":";;;;;;EAMA,IAAY,YAIX;EAJD,WAAY,YAAY;MACtB,qDAAS,CAAA;MACT,yDAAW,CAAA;MACX,uDAAU,CAAA;EACZ,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;;;ECRD;MAoBE,iBAAY,EAAa;UACvB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;UACvB,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC;UAClC,IAAI;cACF,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;WAC/B;UAAC,OAAO,CAAC,EAAE;cACV,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;WAChB;OACF;MA3BM,eAAO,GAAd;;OAEC;MAEM,cAAM,GAAb;;OAEC;MAEM,WAAG,GAAV;;OAEC;MAEM,YAAI,GAAX;;OAEC;;;;;;;MAqBD,sBAAI,GAAJ,UAAK,WAAyB,EAAE,UAAuB;UAUrD,IAAI,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,SAAS,EAAE,CAE1C;OACF;MAED,uBAAK,GAAL;;OAEC;MAED,yBAAO,GAAP;;OAEC;MAEO,yBAAO,GAAf,UAAgB,KAAU;UAA1B,iBAWC;UAVC,IAAI,KAAK,YAAY,OAAO,EAAE;cAC5B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;WAC9C;UAED,UAAU,CAAC;cACT,IAAI,KAAI,CAAC,KAAK,KAAK,YAAY,CAAC,OAAO,EAAE;kBACvC,KAAI,CAAC,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC;kBACpC,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;eACpB;WACF,CAAC,CAAC;OACJ;MAEO,wBAAM,GAAd,UAAe,MAAW;;OAEzB;;;;;MAMO,qCAAmB,GAA3B,UAA4B,OAAO,EAAE,CAAC;UAAtC,iBAaC;;UAXC,IAAI,OAAO,KAAK,CAAC,EAAE;cACjB,MAAM,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;WAC9B;UAED,IAAI,CAAC,YAAY,OAAO,EAAE;cACxB,IAAI,CAAC,CAAC,KAAK,KAAK,YAAY,CAAC,OAAO,EAAE;kBACpC,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;sBACX,KAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;mBAC1C,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;eACjB;WACF;OACF;MACH,cAAC;EAAD,CAAC,IAAA;;;;;;;;;;"}